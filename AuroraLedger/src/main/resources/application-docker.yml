# Aurora Ledger Docker Configuration
# Banking-grade configuration for containerized deployment

spring:
  config:
    activate:
      on-profile: docker
  
  # Database Configuration - MongoDB (Event Store)
  data:
    mongodb:
      uri: ${SPRING_DATA_MONGODB_URI:mongodb://root:aurora123@localhost:27017/aurora_events?authSource=admin}
      database: aurora_events
    
    # Redis Configuration (CQRS Query Cache)
    redis:
      host: ${SPRING_DATA_REDIS_HOST:localhost}
      port: ${SPRING_DATA_REDIS_PORT:6379}
      password: ${SPRING_DATA_REDIS_PASSWORD:aurora123}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0

  # Kafka Configuration (Event Streaming)
  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        "[spring.json.add.type.headers]": false
    consumer:
      group-id: aurora-ledger-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        "[spring.json.trusted.packages]": com.aurora.ledger.domain.events
        "[spring.json.use.type.headers]": false

  # JPA Configuration (Optional fallback to H2)
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: false
    properties:
      hibernate:
        "[format_sql]": true
        dialect: org.hibernate.dialect.H2Dialect

  # H2 Console (Development only)
  h2:
    console:
      enabled: false

# Server Configuration
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: /

# Management and Observability (Spring Boot 3 compatible)
management:
  endpoints:
    web:
      exposure:
        include: ${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE:health,info,metrics,prometheus}
  endpoint:
    health:
      show-details: always
  prometheus:
    metrics:
      export:
        enabled: ${MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED:true}
  metrics:
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true

# Logging Configuration
logging:
  level:
    "[com.aurora.ledger]": INFO
    "[org.springframework.kafka]": WARN
    "[org.springframework.data.mongodb]": WARN
    "[org.springframework.data.redis]": WARN
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"